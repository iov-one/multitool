{"version":3,"sources":["ConditionalError.tsx","settings.ts","util/decimal.ts","util/amounts.ts","util/connection.ts","util/json.ts","util/ledger.ts","util/signatures.ts","util/links.ts","util/base64url.ts","Create.tsx","Sign.tsx","Start.tsx","SignaturesList.tsx","Status.tsx","index.tsx"],"names":["ConditionalError","error","variant","hidden","chains","Map","id","tokenTicker","fee","quantity","fractionalDigits","nodeUrl","networkType","recipientPrefix","Decimal","atomics","data","this","BN","toString","input","Number","isInteger","Error","index","length","match","whole","fractional","search","parts","split","replace","padEnd","factor","pow","div","mod","isZero","trimmedFractionalPart","padStart","amountToString","amount","fromAtomics","getConnector","chainId","a","chain","get","bnsConnector","createBnsConnector","getNonce","identity","connector","establishConnection","bnsConnection","pubkey","nonce","disconnect","contractId","address","multisignatureIdToAddress","Uint8Array","from","Uint64","fromNumber","toBytesBigEndian","getAccount","account","balance","undefined","signed","transaction","creator","postTx","bnsCodec","bytesToPost","response","blockInfo","waitFor","info","isBlockInfoPending","isBlockInfoFailed","message","transactionId","prettyPrintJson","json","document","JSON","parse","stringify","addressIndex","getPubkeyFromLedger","requiredNetworkType","TransportWebUSB","create","transport","app","IovLedgerApp","getVersion","versionResponse","isIovLedgerAppVersion","errorMessage","responseNetwork","testMode","getAddress","isIovLedgerAppAddress","close","createSignature","signer","bytesToSign","bytes","sign","signatureResponse","isIovLedgerAppSignature","signature","unsigned","TransactionEncoder","fromJson","isUnsignedTransaction","isSendTransaction","isMultisignatureTx","signedTransaction","primarySignature","otherSignatures","isFullSignature","isNonNullObject","isPubkeyBundle","isUint8Array","toPrintableSignature","toJson","fromUtf8","Encoding","toUtf8","toLinkEncoded","toBase64","base64urlEncode","fromLinkEncoded","encoded","fromBase64","base64urlDecode","Array","isArray","some","sig","isSignedMultisignatureSendTransaction","makeSigningLink","absolute","encodedTransaction","prefix","window","location","href","testingState","creatorHex","formMultisigContractId","formRecipient","formQuantity","formMemo","unsignedTransactionJson","encodingError","signing","Create","props","state","lastQueriedMultisigContractId","setState","contractInfo","getBalance","fromString","toNumber","then","catch","console","multisigId","sender","startsWith","tx","kind","algo","Algorithm","Ed25519","fromHex","fromUserInput","recipient","memo","tokens","multisig","statusUrl","to","push","className","htmlFor","value","onChange","e","handleFormChange","keys","map","onClick","event","preventDefault","reloadCreatorFromLedger","clearCreator","type","placeholder","disabled","getPubkeyError","signAndContinue","signingError","join","field","newValue","target","pubkeyHex","toHex","log","createSigned","makeStatusLink","React","Component","Sign","signatures","localSignature","matches","rows","readOnly","original","pubkeyResponse","Start","SignaturesList","key","identityToAddress","Status","posting","addSignatureError","prompt","fullSignature","fromPrintableSignature","find","postSuccess","postToChain","postError","firstSignature","slice","makeSignedTransaction","postSignedTransaction","ReactDOM","render","exact","path","component","getElementById"],"mappings":"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","file":"static/js/main.45a0088b.chunk.js","sourcesContent":["import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\ninterface Props {\n  readonly error: string | undefined;\n}\n\nconst ConditionalError = ({ error }: Props): JSX.Element => {\n  return (\n    <Alert variant=\"danger\" hidden={!error}>\n      {error}\n    </Alert>\n  );\n};\n\nexport default ConditionalError;\n","import { Amount, ChainId, TokenTicker } from \"@iov/bcp\";\n\nexport interface ChainInfo {\n  readonly id: ChainId;\n  readonly tokenTicker: TokenTicker;\n  readonly fee: Amount;\n  readonly nodeUrl: string;\n  readonly networkType: \"testnet\" | \"mainnet\";\n  readonly recipientPrefix: \"tiov\" | \"iov\";\n}\n\ntype Chain = [string, ChainInfo];\n\nconst devnet: Chain = [\n  \"local-iov-devnet\",\n  {\n    id: \"local-iov-devnet\" as ChainId,\n    tokenTicker: \"CASH\" as TokenTicker,\n    fee: {\n      quantity: \"100000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"CASH\" as TokenTicker,\n    },\n    nodeUrl: \"ws://localhost:23456/\",\n    networkType: \"testnet\",\n    recipientPrefix: \"tiov\",\n  },\n];\n\nconst boarnet: Chain = [\n  \"iov-boarnet\",\n  {\n    id: \"iov-boarnet\" as ChainId,\n    tokenTicker: \"IOV\" as TokenTicker,\n    fee: {\n      quantity: \"100000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"IOV\" as TokenTicker,\n    },\n    nodeUrl: \"wss://rpc.boarnet.iov.one\",\n    networkType: \"testnet\",\n    recipientPrefix: \"tiov\",\n  },\n];\n\nconst mainnet: Chain = [\n  \"iov-mainnet\",\n  {\n    id: \"iov-mainnet\" as ChainId,\n    tokenTicker: \"IOV\" as TokenTicker,\n    fee: {\n      quantity: \"100000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"IOV\" as TokenTicker,\n    },\n    nodeUrl: \"wss://rpc.mainnet.iov.one\",\n    networkType: \"mainnet\",\n    recipientPrefix: \"iov\",\n  },\n];\n\nexport const chains = new Map<string, ChainInfo>([devnet, boarnet, mainnet]);\n","import BN from \"bn.js\";\n\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\nexport class Decimal {\n  public static fromUserInput(input: string, fractionalDigits: number): Decimal {\n    if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n    if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n\n    for (let index = 0; index < input.length; index++) {\n      if (!input[index].match(/^[0-9.]$/)) {\n        throw new Error(`Invalid character at position ${index + 1}`);\n      }\n    }\n\n    let whole: string;\n    let fractional: string;\n\n    if (input.search(/\\./) === -1) {\n      // integer format, no separator\n      whole = input;\n      fractional = \"\";\n    } else {\n      const parts = input.split(\".\");\n      switch (parts.length) {\n        case 0:\n        case 1:\n          throw new Error(\"Less than two elements in split result. This must not happen here.\");\n        case 2:\n          if (!parts[1]) throw new Error(\"Fractional part missing\");\n          whole = parts[0];\n          fractional = parts[1].replace(/0+$/, \"\");\n          break;\n        default:\n          throw new Error(\"More than one separator found\");\n      }\n    }\n\n    if (fractional.length > fractionalDigits) {\n      throw new Error(\"Got more fractional digits than supported\");\n    }\n\n    const quantity = `${whole}${fractional.padEnd(fractionalDigits, \"0\")}`;\n\n    return new Decimal(quantity, fractionalDigits);\n  }\n\n  public static fromAtomics(atomics: string, fractionalDigits: number): Decimal {\n    if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n    if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n    return new Decimal(atomics, fractionalDigits);\n  }\n\n  public get atomics(): string {\n    return this.data.atomics.toString();\n  }\n\n  private readonly data: {\n    readonly atomics: BN;\n    readonly fractionalDigits: number;\n  };\n\n  private constructor(atomics: string, fractionalDigits: number) {\n    this.data = {\n      atomics: new BN(atomics),\n      fractionalDigits: fractionalDigits,\n    };\n  }\n\n  public toString(): string {\n    const factor = new BN(10).pow(new BN(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n\n    if (fractional.isZero()) {\n      return whole.toString();\n    } else {\n      const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n      const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n      return `${whole.toString()}.${trimmedFractionalPart}`;\n    }\n  }\n}\n","import { Amount } from \"@iov/bcp\";\n\nimport { Decimal } from \"./decimal\";\n\n// This produces a human readable format of the amount, value and token ticker\nexport function amountToString(amount: Amount): string {\n  const { quantity, fractionalDigits, tokenTicker } = amount;\n  return `${Decimal.fromAtomics(quantity, fractionalDigits).toString()} ${tokenTicker}`;\n}\n","import {\n  Address,\n  Amount,\n  ChainConnector,\n  ChainId,\n  Identity,\n  isBlockInfoFailed,\n  isBlockInfoPending,\n  Nonce,\n  SendTransaction,\n  SignedTransaction,\n  TransactionId,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, createBnsConnector, multisignatureIdToAddress, MultisignatureTx } from \"@iov/bns\";\nimport { Uint64 } from \"@iov/encoding\";\n\nimport { chains } from \"../settings\";\n\nexport async function getConnector(chainId: ChainId): Promise<ChainConnector> {\n  const chain = chains.get(chainId);\n  if (!chain) throw new Error(\"Chain not found\");\n\n  const bnsConnector = createBnsConnector(chain.nodeUrl, chainId as ChainId);\n  return bnsConnector;\n}\n\nexport async function getNonce(identity: Identity): Promise<Nonce> {\n  const connector = await getConnector(identity.chainId);\n  const bnsConnection = await connector.establishConnection();\n  const nonce = await bnsConnection.getNonce({ pubkey: identity.pubkey });\n  bnsConnection.disconnect();\n  return nonce;\n}\n\nexport async function getBalance(\n  chainId: ChainId,\n  contractId: number,\n): Promise<{ readonly address: Address; readonly balance: readonly Amount[] | undefined }> {\n  const address = multisignatureIdToAddress(\n    chainId,\n    Uint8Array.from(Uint64.fromNumber(contractId).toBytesBigEndian()),\n  );\n  const connector = await getConnector(chainId);\n  const bnsConnection = await connector.establishConnection();\n  const account = await bnsConnection.getAccount({ address: address });\n  bnsConnection.disconnect();\n  return {\n    address: address,\n    balance: account ? account.balance : undefined,\n  };\n}\n\nexport async function postSignedTransaction(\n  signed: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>,\n): Promise<TransactionId> {\n  const connector = await getConnector(signed.transaction.creator.chainId);\n  const bnsConnection = await connector.establishConnection();\n\n  const response = await bnsConnection.postTx(bnsCodec.bytesToPost(signed));\n  const blockInfo = await response.blockInfo.waitFor(info => !isBlockInfoPending(info));\n  if (isBlockInfoPending(blockInfo)) throw new Error(\"Block info still pending. This is a bug\");\n\n  if (isBlockInfoFailed(blockInfo)) {\n    throw new Error(`Error posting transaction: ${blockInfo.message}`);\n  }\n\n  return response.transactionId;\n}\n","import { JsonCompatibleValue } from \"@iov/encoding\";\n\nexport function prettyPrintJson(json: string | JsonCompatibleValue): string {\n  const document = typeof json === \"string\" ? JSON.parse(json) : json;\n  return JSON.stringify(document, null, 2);\n}\n","import {\n  FullSignature,\n  Identity,\n  isSendTransaction,\n  isUnsignedTransaction,\n  PubkeyBytes,\n  SendTransaction,\n  SignatureBytes,\n  SignedTransaction,\n  UnsignedTransaction,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, isMultisignatureTx, MultisignatureTx } from \"@iov/bns\";\nimport { TransactionEncoder } from \"@iov/encoding\";\nimport {\n  IovLedgerApp,\n  isIovLedgerAppAddress,\n  isIovLedgerAppSignature,\n  isIovLedgerAppVersion,\n} from \"@iov/ledger-bns\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n\nimport { getNonce } from \"./connection\";\n\nconst addressIndex = 0;\n\nexport interface PubkeyResponse {\n  readonly pubkey: PubkeyBytes;\n}\n\nexport async function getPubkeyFromLedger(\n  requiredNetworkType: \"testnet\" | \"mainnet\",\n): Promise<PubkeyResponse> {\n  const transport = await TransportWebUSB.create(1000);\n\n  try {\n    const app = new IovLedgerApp(transport);\n    const versionResponse = await app.getVersion();\n    if (!isIovLedgerAppVersion(versionResponse)) throw new Error(versionResponse.errorMessage);\n    const responseNetwork = versionResponse.testMode ? \"testnet\" : \"mainnet\";\n    if (requiredNetworkType !== responseNetwork) {\n      throw new Error(\n        `Pubkey for ${requiredNetworkType} required but got response from the ${responseNetwork} app`,\n      );\n    }\n\n    const response = await app.getAddress(addressIndex);\n    if (!isIovLedgerAppAddress(response)) throw new Error(response.errorMessage);\n\n    return {\n      pubkey: response.pubkey as PubkeyBytes,\n    };\n  } finally {\n    await transport.close();\n  }\n}\n\nexport async function createSignature(\n  transaction: UnsignedTransaction,\n  signer: Identity,\n): Promise<FullSignature> {\n  const nonce = await getNonce(signer);\n  const { bytes } = bnsCodec.bytesToSign(transaction, nonce);\n  const requiredNetworkType = signer.chainId === \"iov-mainnet\" ? \"mainnet\" : \"testnet\";\n\n  const transport = await TransportWebUSB.create(5000);\n\n  try {\n    const app = new IovLedgerApp(transport);\n    const versionResponse = await app.getVersion();\n    if (!isIovLedgerAppVersion(versionResponse)) throw new Error(versionResponse.errorMessage);\n    const responseNetwork = versionResponse.testMode ? \"testnet\" : \"mainnet\";\n    if (requiredNetworkType !== responseNetwork) {\n      throw new Error(\n        `Pubkey for ${requiredNetworkType} required but got response from the ${responseNetwork} app`,\n      );\n    }\n\n    const signatureResponse = await app.sign(addressIndex, bytes);\n    if (!isIovLedgerAppSignature(signatureResponse)) throw new Error(signatureResponse.errorMessage);\n\n    return {\n      pubkey: signer.pubkey,\n      nonce: nonce,\n      signature: signatureResponse.signature as SignatureBytes,\n    };\n  } finally {\n    await transport.close();\n  }\n}\n\nexport async function createSigned(\n  unsigned: string,\n): Promise<SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>> {\n  const transaction = TransactionEncoder.fromJson(JSON.parse(unsigned));\n  if (\n    !isUnsignedTransaction(transaction) ||\n    !isSendTransaction(transaction) ||\n    !isMultisignatureTx(transaction)\n  ) {\n    throw new Error(\"Invalid transaction format in RPC request to Ledger endpoint.\");\n  }\n\n  const signature = await createSignature(transaction, transaction.creator);\n\n  const signedTransaction: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> = {\n    transaction: transaction,\n    primarySignature: signature,\n    otherSignatures: [],\n  };\n\n  return signedTransaction;\n}\n","import {\n  FullSignature,\n  isPubkeyBundle,\n  isSendTransaction,\n  isUnsignedTransaction,\n  SendTransaction,\n  SignedTransaction,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { isMultisignatureTx, MultisignatureTx } from \"@iov/bns\";\nimport { isNonNullObject, isUint8Array, TransactionEncoder } from \"@iov/encoding\";\n\nexport function isFullSignature(data: unknown): data is FullSignature {\n  if (!isNonNullObject(data)) return false;\n\n  const { nonce, pubkey, signature } = data as FullSignature;\n  if (typeof nonce !== \"number\") return false;\n  if (!isPubkeyBundle(pubkey)) return false;\n  if (!isUint8Array(signature)) return false;\n\n  return true;\n}\n\nexport function isSignedMultisignatureSendTransaction(\n  data: unknown,\n): data is SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> {\n  if (!isNonNullObject(data)) return false;\n\n  const { transaction, primarySignature, otherSignatures } = data as SignedTransaction;\n\n  if (!isUnsignedTransaction(transaction)) return false;\n  if (!isSendTransaction(transaction)) return false;\n  if (!isMultisignatureTx(transaction)) return false;\n  if (!isFullSignature(primarySignature)) return false;\n  if (!Array.isArray(otherSignatures) || otherSignatures.some(sig => !isFullSignature(sig))) return false;\n\n  return true;\n}\n\nexport function toPrintableSignature(signature: FullSignature): string {\n  return JSON.stringify(TransactionEncoder.toJson(signature));\n}\n\nexport function fromPrintableSignature(input: string): FullSignature {\n  const fullSignature = TransactionEncoder.fromJson(JSON.parse(input));\n  if (!isFullSignature(fullSignature)) throw new Error(\"Invalid signature format\");\n  return fullSignature;\n}\n\nexport function toPrintableSignedTransaction(signed: SignedTransaction): string {\n  return JSON.stringify(TransactionEncoder.toJson(signed));\n}\n\nexport function makeSignedTransaction(\n  transaction: SendTransaction & MultisignatureTx & WithCreator,\n  signatures: readonly FullSignature[],\n): SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> {\n  const firstSignature = signatures.find(() => true);\n  if (!firstSignature) throw new Error(\"First signature missing\");\n  return {\n    transaction: transaction,\n    primarySignature: firstSignature,\n    otherSignatures: signatures.slice(1),\n  };\n}\n","import { SendTransaction, SignedTransaction, WithCreator } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport { Encoding, TransactionEncoder } from \"@iov/encoding\";\n\nimport { base64urlDecode, base64urlEncode } from \"./base64url\";\nimport { isSignedMultisignatureSendTransaction, toPrintableSignedTransaction } from \"./signatures\";\n\nconst { fromUtf8, toUtf8 } = Encoding;\n\nfunction toLinkEncoded(\n  transaction: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>,\n): string {\n  const data = toUtf8(toPrintableSignedTransaction(transaction));\n  return base64urlEncode(data);\n}\n\nexport function fromLinkEncoded(\n  encoded: string,\n): SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> {\n  const data = base64urlDecode(encoded);\n  const signedTransaction = TransactionEncoder.fromJson(JSON.parse(fromUtf8(data)));\n  if (!isSignedMultisignatureSendTransaction(signedTransaction)) {\n    throw new Error(\n      \"Transaction data is not an SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>\",\n    );\n  }\n  return signedTransaction;\n}\n\nexport function makeStatusLink(\n  transaction: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>,\n  absolute = false,\n): string {\n  const encodedTransaction = toLinkEncoded(transaction);\n  const prefix = absolute ? window.location.href.split(\"#\")[0] + \"#\" : \"\";\n  const url = `${prefix}/status/${encodedTransaction}`;\n  return url;\n}\n\nexport function makeSigningLink(\n  transaction: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>,\n  absolute = false,\n): string {\n  const encodedTransaction = toLinkEncoded(transaction);\n  const prefix = absolute ? window.location.href.split(\"#\")[0] + \"#\" : \"\";\n  const url = `${prefix}/sign/${encodedTransaction}`;\n  return url;\n}\n","import { Encoding } from \"@iov/encoding\";\n\nexport function base64urlEncode(data: Uint8Array): string {\n  return Encoding.toBase64(data)\n    .replace(\"+\", \"-\")\n    .replace(\"/\", \"_\");\n}\n\nexport function base64urlDecode(encoded: string): Uint8Array {\n  return Encoding.fromBase64(encoded.replace(\"-\", \"+\").replace(\"_\", \"/\"));\n}\n","import {\n  Address,\n  Algorithm,\n  Amount,\n  ChainId,\n  Nonce,\n  PubkeyBytes,\n  SendTransaction,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, multisignatureIdToAddress, MultisignatureTx } from \"@iov/bns\";\nimport { Encoding, TransactionEncoder, Uint64 } from \"@iov/encoding\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Redirect } from \"react-router\";\n\nimport ConditionalError from \"./ConditionalError\";\nimport { chains } from \"./settings\";\nimport { amountToString } from \"./util/amounts\";\nimport { getBalance } from \"./util/connection\";\nimport { Decimal } from \"./util/decimal\";\nimport { prettyPrintJson } from \"./util/json\";\nimport { createSigned, getPubkeyFromLedger } from \"./util/ledger\";\nimport { makeStatusLink } from \"./util/links\";\n\ninterface CreateProps {}\n\ninterface CreateState {\n  readonly creatorHex: string;\n  readonly chainId: string;\n  readonly formMultisigContractId: string;\n  readonly formRecipient: string;\n  readonly formQuantity: string;\n  readonly formMemo: string;\n  readonly unsignedTransactionJson: string | null;\n  readonly encodingError: string | null;\n  readonly getPubkeyError?: string;\n  readonly signingError?: string;\n  readonly signing: boolean;\n  readonly statusUrl?: string;\n  readonly lastQueriedMultisigContractId?: string;\n  readonly contractInfo?: {\n    readonly address: Address;\n    readonly balance: readonly Amount[] | undefined;\n  };\n}\n\ntype FormField = \"chainId\" | \"multisigContractId\" | \"recipient\" | \"quantity\" | \"memo\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst emptyState: CreateState = {\n  creatorHex: \"\",\n  chainId: \"iov-mainnet\",\n  formMultisigContractId: \"\",\n  formRecipient: \"\",\n  formQuantity: \"\",\n  formMemo: \"\",\n  unsignedTransactionJson: null,\n  encodingError: null,\n  signing: false,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst testingState: CreateState = {\n  creatorHex: \"\",\n  chainId: \"iov-boarnet\",\n  formMultisigContractId: \"21\",\n  formRecipient: \"tiov1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqplsnxjl\",\n  formQuantity: \"100.56\",\n  formMemo: \"What a wonderful day\",\n  unsignedTransactionJson: null,\n  encodingError: null,\n  signing: false,\n};\n\nclass Create extends React.Component<CreateProps, CreateState> {\n  public constructor(props: CreateProps) {\n    super(props);\n    this.state = { ...testingState };\n  }\n\n  public componentDidUpdate(): void {\n    let encodingError: string | null = null;\n\n    try {\n      const chain = chains.get(this.state.chainId);\n      if (!chain) throw new Error(\"No configuration for theis chain ID found\");\n\n      if (this.state.lastQueriedMultisigContractId !== this.state.formMultisigContractId) {\n        this.setState({\n          lastQueriedMultisigContractId: this.state.formMultisigContractId,\n          contractInfo: undefined,\n        });\n\n        getBalance(chain.id, Uint64.fromString(this.state.formMultisigContractId).toNumber())\n          .then(({ address, balance }) => {\n            this.setState({\n              contractInfo: {\n                address: address,\n                balance: balance,\n              },\n            });\n          })\n          .catch(error => console.error(error));\n      }\n\n      const multisigId = Uint64.fromString(this.state.formMultisigContractId);\n      const sender = multisignatureIdToAddress(\n        this.state.chainId as ChainId,\n        Uint8Array.from(multisigId.toBytesBigEndian()),\n      );\n\n      if (!this.state.creatorHex) throw new Error(\"Transaction creator unset\");\n\n      if (!this.state.formRecipient.startsWith(chain.recipientPrefix)) {\n        throw new Error(`Recipient address with prefix '${chain.recipientPrefix}' expected`);\n      }\n\n      const tx: SendTransaction & MultisignatureTx & WithCreator = {\n        kind: \"bcp/send\",\n        creator: {\n          chainId: this.state.chainId as ChainId,\n          pubkey: {\n            algo: Algorithm.Ed25519,\n            data: Encoding.fromHex(this.state.creatorHex) as PubkeyBytes,\n          },\n        },\n        amount: {\n          quantity: Decimal.fromUserInput(this.state.formQuantity, 9).atomics,\n          fractionalDigits: 9,\n          tokenTicker: chain.tokenTicker,\n        },\n        sender: sender,\n        recipient: this.state.formRecipient as Address,\n        memo: this.state.formMemo,\n        fee: { tokens: chain.fee },\n        multisig: [multisigId.toNumber()],\n      };\n\n      // test serialization for input validation\n      bnsCodec.bytesToSign(tx, 0 as Nonce);\n\n      const unsignedTransactionJson = JSON.stringify(TransactionEncoder.toJson(tx));\n      if (this.state.unsignedTransactionJson !== unsignedTransactionJson) {\n        this.setState({\n          unsignedTransactionJson: unsignedTransactionJson,\n          encodingError: null,\n        });\n      }\n    } catch (error) {\n      encodingError = error instanceof Error ? error.message : error.toString();\n    }\n\n    if (this.state.encodingError !== encodingError) {\n      this.setState({\n        unsignedTransactionJson: null,\n        encodingError: encodingError,\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        {this.state.statusUrl && <Redirect to={this.state.statusUrl} push />}\n        <Row>\n          <Col className=\"col-6\">\n            <h3>Enter transaction</h3>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"chainIdInput\">Chain ID</label>\n                <select\n                  className=\"form-control\"\n                  id=\"chainIdInput\"\n                  value={this.state.chainId}\n                  onChange={e => this.handleFormChange(\"chainId\", e)}\n                >\n                  {Array.from(chains.keys()).map(chainId => (\n                    <option>{chainId}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"creatorInput\">Transaction creator</label>\n                <button\n                  className=\"btn btn-link btn-sm\"\n                  onClick={event => {\n                    event.preventDefault();\n                    this.reloadCreatorFromLedger();\n                  }}\n                >\n                  Get from Ledger\n                </button>\n                <button\n                  className=\"btn btn-link btn-sm\"\n                  onClick={event => {\n                    event.preventDefault();\n                    this.clearCreator();\n                  }}\n                >\n                  Clear\n                </button>\n                <input\n                  id=\"creatorInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Creator pubkey \"\n                  value={this.state.creatorHex}\n                  disabled\n                />\n                <small className=\"form-text text-muted\">\n                  Pubkey of the person who creates this transaction\n                </small>\n              </div>\n\n              <ConditionalError error={this.state.getPubkeyError} />\n\n              <div className=\"form-group\">\n                <label htmlFor=\"senderInput\">Multisig contract ID</label>\n                <input\n                  id=\"senderInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Sender\"\n                  value={this.state.formMultisigContractId}\n                  onChange={e => this.handleFormChange(\"multisigContractId\", e)}\n                />\n                <small className=\"form-text text-muted\">Use integer format, e.g. 42</small>\n                <div className=\"invalid-feedback\">Please choose a username.</div>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"recipientInput\">Recipient address</label>\n                <input\n                  id=\"recipientInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Recipient\"\n                  value={this.state.formRecipient}\n                  onChange={e => this.handleFormChange(\"recipient\", e)}\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  IOV address, e.g. iov1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqp396zjw\n                </small>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"quantityInput\">Quantity</label>\n                <input\n                  id=\"quantityInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"100.56\"\n                  value={this.state.formQuantity}\n                  onChange={e => this.handleFormChange(\"quantity\", e)}\n                />\n                <small className=\"form-text text-muted\">Quantity, e.g. 100.56 for 100.56 IOV</small>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"memoInput\">Memo</label>\n                <input\n                  id=\"memoInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Memo\"\n                  value={this.state.formMemo}\n                  onChange={e => this.handleFormChange(\"memo\", e)}\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  Arbitrary text attached to the transaction\n                </small>\n              </div>\n\n              <p>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={this.state.signing || !this.state.unsignedTransactionJson}\n                  onClick={event => {\n                    event.preventDefault();\n                    this.signAndContinue();\n                  }}\n                >\n                  Sign and continue\n                </button>\n              </p>\n\n              <Alert hidden={!this.state.signing} variant=\"info\">\n                Please sign transaction using Ledger device now\n              </Alert>\n              <ConditionalError error={this.state.signingError} />\n            </form>\n          </Col>\n          <Col className=\"col-6\">\n            <h3>Multisig contract info</h3>\n            {this.state.contractInfo && (\n              <p>\n                Address: {this.state.contractInfo.address}\n                <br />\n                Balance:{\" \"}\n                {this.state.contractInfo.balance\n                  ? this.state.contractInfo.balance.map(amountToString).join(\", \")\n                  : \"–\"}\n              </p>\n            )}\n\n            <h3>Details</h3>\n            {this.state.unsignedTransactionJson && (\n              <div>\n                <p>This is a machine processable representation of the transaction.</p>\n                <pre>{prettyPrintJson(this.state.unsignedTransactionJson)}</pre>\n              </div>\n            )}\n            <Alert variant=\"danger\" hidden={!this.state.encodingError}>\n              <p className=\"mb-0\">\n                <strong>Transaction encoding error:</strong>\n                <br />\n                {this.state.encodingError}\n              </p>\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private handleFormChange(\n    field: FormField,\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ): void {\n    const newValue = event.target.value;\n\n    switch (field) {\n      case \"chainId\":\n        this.setState({ chainId: newValue });\n        break;\n      case \"multisigContractId\":\n        this.setState({ formMultisigContractId: newValue });\n        break;\n      case \"recipient\":\n        this.setState({ formRecipient: newValue });\n        break;\n      case \"quantity\":\n        this.setState({ formQuantity: newValue });\n        break;\n      case \"memo\":\n        this.setState({ formMemo: newValue });\n        break;\n      default:\n        throw new Error(`Unsupported form field '${field}'`);\n    }\n  }\n\n  private clearCreator(): void {\n    this.setState({\n      creatorHex: \"\",\n      getPubkeyError: undefined,\n    });\n  }\n\n  private reloadCreatorFromLedger(): void {\n    this.clearCreator();\n\n    const chain = chains.get(this.state.chainId);\n    if (!chain) throw new Error(\"Chain not found\");\n\n    getPubkeyFromLedger(chain.networkType).then(\n      response => {\n        const pubkeyHex = Encoding.toHex(response.pubkey);\n        console.log(\"Received pubkey from Ledger:\", pubkeyHex);\n        this.setState({ creatorHex: pubkeyHex });\n      },\n      error => {\n        console.info(\"Full error message\", error);\n        const errorMessage = error instanceof Error ? error.message : error.toString();\n        this.setState({\n          getPubkeyError: errorMessage,\n        });\n      },\n    );\n  }\n\n  private signAndContinue(): void {\n    this.setState({\n      signingError: undefined,\n      signing: true,\n    });\n\n    if (!this.state.unsignedTransactionJson) throw new Error(\"unsigned transaction not set\");\n    createSigned(this.state.unsignedTransactionJson).then(\n      signed => {\n        const statusUrl = makeStatusLink(signed);\n        console.log(\"Navigating to\", statusUrl);\n        this.setState({\n          statusUrl: statusUrl,\n          signing: false,\n        });\n      },\n      error => {\n        console.info(\"Full error message\", error);\n        const errorMessage = error instanceof Error ? error.message : error.toString();\n        this.setState({\n          signingError: errorMessage,\n          signing: false,\n        });\n      },\n    );\n  }\n}\n\nexport default Create;\n","import { Algorithm, FullSignature, Identity, PubkeyBytes, SendTransaction, WithCreator } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport { TransactionEncoder } from \"@iov/encoding\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport ConditionalError from \"./ConditionalError\";\nimport { chains } from \"./settings\";\nimport { prettyPrintJson } from \"./util/json\";\nimport { createSignature, getPubkeyFromLedger } from \"./util/ledger\";\nimport { fromLinkEncoded } from \"./util/links\";\nimport { toPrintableSignature } from \"./util/signatures\";\n\ninterface SignProps {}\n\ninterface SignState {\n  readonly transaction: (SendTransaction & MultisignatureTx & WithCreator) | null;\n  readonly signatures: readonly FullSignature[];\n  readonly localSignature: string;\n  readonly signingError?: string;\n  readonly signing: boolean;\n}\n\nclass Sign extends React.Component<SignProps, SignState> {\n  public constructor(props: SignProps) {\n    super(props);\n    this.state = {\n      transaction: null,\n      signatures: [],\n      localSignature: \"\",\n      signing: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (!this.state.transaction) {\n      const matches = window.location.href.match(/\\/sign\\/([-_=a-zA-Z0-9]+)/);\n      if (matches && matches.length >= 2) {\n        const signedTransaction = fromLinkEncoded(matches[1]);\n        const { transaction, primarySignature, otherSignatures } = signedTransaction;\n        this.setState({\n          transaction: transaction,\n          signatures: [primarySignature, ...otherSignatures],\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col className=\"col-6\">\n            <h2>Review transaction</h2>\n            <pre>{prettyPrintJson(TransactionEncoder.toJson(this.state.transaction))}</pre>\n          </Col>\n          <Col className=\"col-6\">\n            <h2>Create Signature</h2>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"yourSignature\">Your signature</label>\n              <textarea\n                className=\"form-control\"\n                id=\"yourSignature\"\n                rows={6}\n                value={this.state.localSignature}\n                readOnly={true}\n              ></textarea>\n            </div>\n\n            <p>\n              <button\n                className=\"btn btn-primary\"\n                onClick={async event => {\n                  event.preventDefault();\n                  this.setState({ localSignature: \"\", signingError: undefined, signing: true });\n\n                  try {\n                    const signature = await this.createSignature();\n                    this.setState({\n                      localSignature: signature,\n                      signing: false,\n                    });\n                  } catch (error) {\n                    console.info(\"Full error message\", error);\n                    const errorMessage = error instanceof Error ? error.message : error.toString();\n                    this.setState({\n                      signingError: errorMessage,\n                      signing: false,\n                    });\n                  }\n                }}\n              >\n                Sign transaction now\n              </button>\n            </p>\n\n            <Alert hidden={!this.state.signing} variant=\"info\">\n              Please sign transaction using Ledger device now\n            </Alert>\n            <ConditionalError error={this.state.signingError} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>&nbsp;</Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async createSignature(): Promise<string> {\n    const original = this.state.transaction;\n    if (!original) throw new Error(\"Transaction not set\");\n\n    const chain = chains.get(original.creator.chainId);\n    if (!chain) throw new Error(\"Chain not found\");\n\n    const pubkeyResponse = await getPubkeyFromLedger(chain.networkType);\n\n    const signer: Identity = {\n      chainId: original.creator.chainId,\n      pubkey: {\n        algo: Algorithm.Ed25519,\n        data: pubkeyResponse.pubkey as PubkeyBytes,\n      },\n    };\n\n    const signature = await createSignature(original, signer);\n    return toPrintableSignature(signature);\n  }\n}\n\nexport default Sign;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\ninterface StartProps {}\n\nclass Start extends React.Component<StartProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>Multitool</h1>\n            <h2>Create multisignatures transactions using Ledger Nano S</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/create\" className=\"btn btn-lg btn-block btn-primary\">\n              Create new transaction\n            </Link>\n          </Col>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">&nbsp;</Col>\n          <Col className=\"\"></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Start;\n","import { ChainId, FullSignature } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { Encoding } from \"@iov/encoding\";\nimport React from \"react\";\n\nimport { toPrintableSignature } from \"./util/signatures\";\n\nconst { toHex } = Encoding;\n\ninterface SignaturesListPros {\n  readonly chainId: ChainId;\n  readonly signatures: readonly FullSignature[];\n}\n\nclass SignaturesList extends React.Component<SignaturesListPros, {}> {\n  public render(): JSX.Element {\n    return (\n      <ol className=\"list-group mb-3\">\n        {this.props.signatures.map(signature => (\n          <li className=\"list-group-item\" key={toHex(signature.pubkey.data)}>\n            {bnsCodec.identityToAddress({\n              chainId: this.props.chainId,\n              pubkey: signature.pubkey,\n            })}\n            : <code>{toPrintableSignature(signature)}</code>\n          </li>\n        ))}\n      </ol>\n    );\n  }\n}\n\nexport default SignaturesList;\n","import { FullSignature, SendTransaction, SignedTransaction, TransactionId, WithCreator } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport { Encoding, TransactionEncoder } from \"@iov/encoding\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport ConditionalError from \"./ConditionalError\";\nimport SignaturesList from \"./SignaturesList\";\nimport { postSignedTransaction } from \"./util/connection\";\nimport { prettyPrintJson } from \"./util/json\";\nimport { fromLinkEncoded, makeSigningLink } from \"./util/links\";\nimport { fromPrintableSignature, makeSignedTransaction } from \"./util/signatures\";\n\nconst { toHex } = Encoding;\n\ninterface StatusProps {}\n\ninterface StatusState {\n  readonly original: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> | null;\n  readonly signatures: readonly FullSignature[];\n  readonly localSignature: string;\n  readonly addSignatureError?: string;\n  readonly posting: boolean;\n  readonly postError?: string;\n  readonly postSuccess?: TransactionId;\n}\n\nclass Status extends React.Component<StatusProps, StatusState> {\n  public constructor(props: StatusProps) {\n    super(props);\n    this.state = {\n      original: null,\n      signatures: [],\n      localSignature: \"\",\n      posting: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (!this.state.original) {\n      const matches = window.location.href.match(/\\/status\\/([-_=a-zA-Z0-9]+)/);\n      if (matches && matches.length >= 2) {\n        const signedTransaction = fromLinkEncoded(matches[1]);\n        const { primarySignature, otherSignatures } = signedTransaction;\n        this.setState({\n          original: signedTransaction,\n          signatures: [primarySignature, ...otherSignatures],\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h2>Signing link</h2>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"signingLink\">\n                Send this link to every user supposed to sign this transaction\n              </label>\n              <textarea\n                className=\"form-control\"\n                id=\"signingLink\"\n                rows={3}\n                value={this.state.original ? makeSigningLink(this.state.original, true) : \"\"}\n                readOnly={true}\n              ></textarea>\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"col-6\">\n            <h2>Review transaction</h2>\n            <pre>\n              {this.state.original\n                ? prettyPrintJson(TransactionEncoder.toJson(this.state.original.transaction))\n                : \"\"}\n            </pre>\n          </Col>\n          <Col className=\"col-6\">\n            <h2>Signatures ({this.state.signatures.length})</h2>\n            {this.state.original && (\n              <SignaturesList\n                chainId={this.state.original.transaction.creator.chainId}\n                signatures={this.state.signatures}\n              />\n            )}\n\n            <p>\n              <button\n                className=\"btn btn-primary btn-sm\"\n                onClick={event => {\n                  event.preventDefault();\n                  this.setState({ addSignatureError: undefined });\n\n                  const signature = prompt(\"Please enter signature\");\n                  if (signature === null) return;\n\n                  try {\n                    console.log(signature);\n                    const fullSignature = fromPrintableSignature(signature);\n\n                    const existingPubkeys = this.state.signatures.map(sig => toHex(sig.pubkey.data));\n                    if (existingPubkeys.find(pubkeyHex => pubkeyHex === toHex(fullSignature.pubkey.data))) {\n                      throw new Error(\"Signature of this account already included\");\n                    }\n\n                    this.setState({\n                      signatures: [...this.state.signatures, fullSignature],\n                    });\n                  } catch (error) {\n                    console.info(\"Full error message\", error);\n                    const errorMessage = error instanceof Error ? error.message : error.toString();\n                    this.setState({ addSignatureError: errorMessage });\n                  }\n                }}\n              >\n                Add signature\n              </button>\n            </p>\n            <ConditionalError error={this.state.addSignatureError} />\n\n            <h2>Post to blockchain</h2>\n            <div hidden={!!this.state.postSuccess}>\n              <p>The transaction with all signatures from above will be posted to the IOV blockchain.</p>\n              <p>\n                <button\n                  className=\"btn btn-primary\"\n                  disabled={this.state.posting}\n                  onClick={event => {\n                    event.preventDefault();\n                    this.postToChain();\n                  }}\n                >\n                  Post now\n                </button>\n              </p>\n            </div>\n            <Alert variant=\"success\" hidden={!this.state.postSuccess}>\n              <p>Sucessfully posted transaction with ID {this.state.postSuccess} to the blockchain.</p>\n            </Alert>\n            <ConditionalError error={this.state.postError} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>&nbsp;</Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private postToChain(): void {\n    if (!this.state.original) throw new Error(\"Original transaction not set\");\n    const signed = makeSignedTransaction(this.state.original.transaction, this.state.signatures);\n\n    this.setState({\n      posting: true,\n      postError: undefined,\n    });\n    postSignedTransaction(signed).then(\n      transactionId => {\n        console.log(\"Successfully posted\", transactionId);\n        this.setState({\n          posting: false,\n          postError: undefined,\n          postSuccess: transactionId,\n        });\n      },\n      error => {\n        console.info(\"Full error message\", error);\n        const errorMessage = error instanceof Error ? error.message : error.toString();\n        this.setState({\n          posting: false,\n          postError: errorMessage,\n        });\n      },\n    );\n  }\n}\n\nexport default Status;\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport Create from \"./Create\";\nimport Sign from \"./Sign\";\nimport Start from \"./Start\";\nimport Status from \"./Status\";\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/create\" component={Create} />\n      <Route path=\"/status\" component={Status} />\n      <Route path=\"/sign\" component={Sign} />\n      <Route path=\"/\" component={Start} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}