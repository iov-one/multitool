{"version":3,"sources":["ConditionalError.tsx","settings.ts","Transaction.tsx","util/json.ts","util/amounts.ts","util/connection.ts","util/errors.ts","util/ledger.ts","util/base64url.ts","util/arrays.ts","util/checksummed.ts","util/signatures.ts","util/links.ts","Create.tsx","Sign.tsx","Start.tsx","SignaturesList.tsx","util/text.ts","Status.tsx","index.tsx"],"names":["ConditionalError","error","variant","hidden","chains","Map","id","tokenTicker","fee","quantity","fractionalDigits","nodeUrl","networkType","Transaction","transaction","json","document","JSON","parse","stringify","prettyPrintJson","TransactionEncoder","toJson","amountToString","amount","Decimal","fromAtomics","toString","getConnector","chainId","a","chain","get","Error","bnsConnector","createBnsConnector","getNonce","pubkey","connector","establishConnection","bnsConnection","nonce","disconnect","contractId","address","multisignatureIdToAddress","Uint8Array","from","Uint64","fromNumber","toBytesBigEndian","getAccount","account","balance","undefined","signed","creator","postTx","bnsCodec","bytesToPost","response","blockInfo","waitFor","info","isBlockInfoPending","isBlockInfoFailed","message","transactionId","getErrorMessage","addressIndex","getPubkeyFromLedger","requiredNetworkType","TransportWebUSB","create","transport","app","IovLedgerApp","getVersion","versionResponse","isIovLedgerAppVersion","errorMessage","responseNetwork","testMode","getAddress","isIovLedgerAppAddress","close","createSignature","signer","bytesToSign","bytes","sign","signatureResponse","isIovLedgerAppSignature","signature","unsigned","primarySignature","otherSignatures","base64urlEncode","data","Encoding","toBase64","replace","base64urlDecode","encoded","fromBase64","arrayEquals","b","length","every","byte","index","checksumLength","makeChecksum","Sha256","digest","slice","decodeChecksummed","decoder","decoded","expectedChecksum","raw","isUnsignedMultisignatureSendTransaction","isNonNullObject","isUnsignedTransaction","isSendTransaction","isMultisignatureTx","toPrintableSignature","fromPrintableSignature","input","fullSignature","fromJson","isFullSignature","verifySignature","prehashType","PrehashType","Sha512","prehash","Ed25519","valid","fromUtf8","toUtf8","toLinkEncoded","encoder","checksum","encodeChecksummed","toPrintableSignedTransaction","signedFromLinkEncoded","signedTransaction","Array","isArray","some","sig","isSignedMultisignatureSendTransaction","makeSigningLink","unsignedTransaction","absolute","encodedTransaction","prefix","window","location","href","split","testingState","creatorHex","formMultisigContractId","formRecipient","formQuantity","formMemo","encodingError","signing","Create","props","state","this","lastQueriedMultisigContractId","setState","contractInfo","getBalance","fromString","toNumber","then","catch","console","multisigId","sender","expectedPrefix","startsWith","tx","kind","algo","Algorithm","fromHex","fromUserInput","atomics","recipient","memo","tokens","multisig","equal","statusUrl","to","push","className","htmlFor","value","onChange","e","handleFormChange","keys","map","onClick","event","preventDefault","reloadCreatorFromLedger","clearCreator","type","placeholder","disabled","getPubkeyError","signAndContinue","signingError","join","field","newValue","target","pubkeyHex","toHex","log","createSigned","makeStatusLink","React","Component","Sign","localSignature","matches","match","unsignedFromLinkEncoded","warn","globalError","rows","readOnly","original","pubkeyResponse","Start","Signature","noneStatus","identityToAddress","key","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","ellideMiddle","received","expected","SignaturesList","interval","nonceStatuses","signatures","_","runCheck","Promise","all","latestNonce","statuses","setTimeout","setInterval","clearTimeout","Status","posting","addSignature","addSignatureError","postSuccess","postToChain","postError","signatureInput","prompt","newSignature","find","filter","firstSignature","makeSignedTransaction","postSignedTransaction","ReactDOM","render","exact","path","component","getElementById"],"mappings":"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","file":"static/js/main.ccb1a7e4.chunk.js","sourcesContent":["import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\ninterface Props {\n  readonly error: string | undefined;\n}\n\nconst ConditionalError = ({ error }: Props): JSX.Element => {\n  return (\n    <Alert variant=\"danger\" hidden={!error}>\n      {error}\n    </Alert>\n  );\n};\n\nexport default ConditionalError;\n","import { Amount, ChainId, TokenTicker } from \"@iov/bcp\";\n\nexport interface ChainInfo {\n  readonly id: ChainId;\n  readonly tokenTicker: TokenTicker;\n  readonly fee: Amount;\n  readonly nodeUrl: string;\n  readonly networkType: \"testnet\" | \"mainnet\";\n}\n\ntype Chain = [string, ChainInfo];\n\nconst devnet: Chain = [\n  \"local-iov-devnet\",\n  {\n    id: \"local-iov-devnet\" as ChainId,\n    tokenTicker: \"CASH\" as TokenTicker,\n    fee: {\n      quantity: \"100000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"CASH\" as TokenTicker,\n    },\n    nodeUrl: \"ws://localhost:23456/\",\n    networkType: \"testnet\",\n  },\n];\n\nconst babynet: Chain = [\n  \"iov-babynet\",\n  {\n    id: \"iov-babynet\" as ChainId,\n    tokenTicker: \"IOV\" as TokenTicker,\n    fee: {\n      quantity: \"500000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"IOV\" as TokenTicker,\n    },\n    nodeUrl: \"wss://rpc-private-a-vip-babynet.iov.one\",\n    networkType: \"testnet\",\n  },\n];\n\nconst clapnet: Chain = [\n  \"iov-clapnet\",\n  {\n    id: \"iov-clapnet\" as ChainId,\n    tokenTicker: \"IOV\" as TokenTicker,\n    fee: {\n      quantity: \"500000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"IOV\" as TokenTicker,\n    },\n    nodeUrl: \"wss://rpc-private-a-vip2-clapnet.iov.one\",\n    networkType: \"testnet\",\n  },\n];\n\nconst mainnet: Chain = [\n  \"iov-mainnet\",\n  {\n    id: \"iov-mainnet\" as ChainId,\n    tokenTicker: \"IOV\" as TokenTicker,\n    fee: {\n      quantity: \"500000000\",\n      fractionalDigits: 9,\n      tokenTicker: \"IOV\" as TokenTicker,\n    },\n    nodeUrl: \"wss://rpc-private-a.iov.one\",\n    networkType: \"mainnet\",\n  },\n];\n\nexport const chains = new Map<string, ChainInfo>([devnet, babynet, clapnet, mainnet]);\n","import { SendTransaction, UnsignedTransaction } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport { TransactionEncoder } from \"@iov/encoding\";\nimport React from \"react\";\n\nimport { prettyPrintJson } from \"./util/json\";\n\ninterface TransactionProps {\n  readonly transaction: UnsignedTransaction & SendTransaction & MultisignatureTx;\n}\n\nconst Transaction = ({ transaction }: TransactionProps): JSX.Element => {\n  return <pre>{prettyPrintJson(TransactionEncoder.toJson(transaction))}</pre>;\n};\n\nexport default Transaction;\n","import { JsonCompatibleValue } from \"@iov/encoding\";\n\nexport function prettyPrintJson(json: string | JsonCompatibleValue): string {\n  const document = typeof json === \"string\" ? JSON.parse(json) : json;\n  return JSON.stringify(document, null, 2);\n}\n","import { Amount } from \"@iov/bcp\";\nimport { Decimal } from \"@iov/encoding\";\n\n// This produces a human readable format of the amount, value and token ticker\nexport function amountToString(amount: Amount): string {\n  const { quantity, fractionalDigits, tokenTicker } = amount;\n  return `${Decimal.fromAtomics(quantity, fractionalDigits).toString()} ${tokenTicker}`;\n}\n","import {\n  Address,\n  Amount,\n  ChainConnector,\n  ChainId,\n  isBlockInfoFailed,\n  isBlockInfoPending,\n  Nonce,\n  PubkeyBundle,\n  SendTransaction,\n  SignedTransaction,\n  TransactionId,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, createBnsConnector, multisignatureIdToAddress, MultisignatureTx } from \"@iov/bns\";\nimport { Uint64 } from \"@iov/encoding\";\n\nimport { chains } from \"../settings\";\n\nexport async function getConnector(chainId: ChainId): Promise<ChainConnector> {\n  const chain = chains.get(chainId);\n  if (!chain) throw new Error(\"Chain not found\");\n\n  const bnsConnector = createBnsConnector(chain.nodeUrl, chainId as ChainId);\n  return bnsConnector;\n}\n\nexport async function getNonce(chainId: ChainId, pubkey: PubkeyBundle): Promise<Nonce> {\n  const connector = await getConnector(chainId);\n  const bnsConnection = await connector.establishConnection();\n  const nonce = await bnsConnection.getNonce({ pubkey: pubkey });\n  bnsConnection.disconnect();\n  return nonce;\n}\n\nexport async function getBalance(\n  chainId: ChainId,\n  contractId: number,\n): Promise<{ readonly address: Address; readonly balance: readonly Amount[] | undefined }> {\n  const address = multisignatureIdToAddress(\n    chainId,\n    Uint8Array.from(Uint64.fromNumber(contractId).toBytesBigEndian()),\n  );\n  const connector = await getConnector(chainId);\n  const bnsConnection = await connector.establishConnection();\n  const account = await bnsConnection.getAccount({ address: address });\n  bnsConnection.disconnect();\n  return {\n    address: address,\n    balance: account ? account.balance : undefined,\n  };\n}\n\nexport async function postSignedTransaction(\n  signed: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>,\n): Promise<TransactionId> {\n  const connector = await getConnector(signed.transaction.creator.chainId);\n  const bnsConnection = await connector.establishConnection();\n\n  const response = await bnsConnection.postTx(bnsCodec.bytesToPost(signed));\n  const blockInfo = await response.blockInfo.waitFor(info => !isBlockInfoPending(info));\n  if (isBlockInfoPending(blockInfo)) throw new Error(\"Block info still pending. This is a bug\");\n\n  if (isBlockInfoFailed(blockInfo)) {\n    throw new Error(`Error posting transaction: ${blockInfo.message}`);\n  }\n\n  return response.transactionId;\n}\n","export function getErrorMessage(error: unknown): string {\n  return error instanceof Error ? error.message : `${error}`;\n}\n","import {\n  FullSignature,\n  Identity,\n  PubkeyBytes,\n  SendTransaction,\n  SignatureBytes,\n  SignedTransaction,\n  UnsignedTransaction,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, MultisignatureTx } from \"@iov/bns\";\nimport {\n  IovLedgerApp,\n  isIovLedgerAppAddress,\n  isIovLedgerAppSignature,\n  isIovLedgerAppVersion,\n} from \"@iov/ledger-bns\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n\nimport { getNonce } from \"./connection\";\n\nconst addressIndex = 0;\n\nexport interface PubkeyResponse {\n  readonly pubkey: PubkeyBytes;\n}\n\nexport async function getPubkeyFromLedger(\n  requiredNetworkType: \"testnet\" | \"mainnet\",\n): Promise<PubkeyResponse> {\n  const transport = await TransportWebUSB.create(1000);\n\n  try {\n    const app = new IovLedgerApp(transport);\n    const versionResponse = await app.getVersion();\n    if (!isIovLedgerAppVersion(versionResponse)) throw new Error(versionResponse.errorMessage);\n    const responseNetwork = versionResponse.testMode ? \"testnet\" : \"mainnet\";\n    if (requiredNetworkType !== responseNetwork) {\n      throw new Error(\n        `Pubkey for ${requiredNetworkType} required but got response from the ${responseNetwork} app`,\n      );\n    }\n\n    const response = await app.getAddress(addressIndex);\n    if (!isIovLedgerAppAddress(response)) throw new Error(response.errorMessage);\n\n    return {\n      pubkey: response.pubkey as PubkeyBytes,\n    };\n  } finally {\n    await transport.close();\n  }\n}\n\nexport async function createSignature(\n  transaction: UnsignedTransaction,\n  signer: Identity,\n): Promise<FullSignature> {\n  const nonce = await getNonce(signer.chainId, signer.pubkey);\n  const { bytes } = bnsCodec.bytesToSign(transaction, nonce);\n  const requiredNetworkType = signer.chainId === \"iov-mainnet\" ? \"mainnet\" : \"testnet\";\n\n  const transport = await TransportWebUSB.create(5000);\n\n  try {\n    const app = new IovLedgerApp(transport);\n    const versionResponse = await app.getVersion();\n    if (!isIovLedgerAppVersion(versionResponse)) throw new Error(versionResponse.errorMessage);\n    const responseNetwork = versionResponse.testMode ? \"testnet\" : \"mainnet\";\n    if (requiredNetworkType !== responseNetwork) {\n      throw new Error(\n        `Pubkey for ${requiredNetworkType} required but got response from the ${responseNetwork} app`,\n      );\n    }\n\n    const signatureResponse = await app.sign(addressIndex, bytes);\n    if (!isIovLedgerAppSignature(signatureResponse)) throw new Error(signatureResponse.errorMessage);\n\n    return {\n      pubkey: signer.pubkey,\n      nonce: nonce,\n      signature: signatureResponse.signature as SignatureBytes,\n    };\n  } finally {\n    await transport.close();\n  }\n}\n\nexport async function createSigned(\n  unsigned: UnsignedTransaction & SendTransaction & MultisignatureTx,\n): Promise<SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>> {\n  const signature = await createSignature(unsigned, unsigned.creator);\n  return {\n    transaction: unsigned,\n    primarySignature: signature,\n    otherSignatures: [],\n  };\n}\n","import { Encoding } from \"@iov/encoding\";\n\nexport function base64urlEncode(data: Uint8Array): string {\n  return Encoding.toBase64(data)\n    .replace(\"+\", \"-\")\n    .replace(\"/\", \"_\");\n}\n\nexport function base64urlDecode(encoded: string): Uint8Array {\n  return Encoding.fromBase64(encoded.replace(\"-\", \"+\").replace(\"_\", \"/\"));\n}\n","export function arrayEquals(a: Uint8Array, b: Uint8Array): boolean {\n  return a.length === b.length && a.every((byte, index) => byte === b[index]);\n}\n","import { Sha256 } from \"@iov/crypto\";\n\nimport { arrayEquals } from \"./arrays\";\n\nexport type Encoder = (data: Uint8Array) => string;\nexport type Decoder = (encoded: string) => Uint8Array;\n\nconst checksumLength = 4; // bytes\n\nfunction makeChecksum(data: Uint8Array): Uint8Array {\n  return new Sha256(data).digest().slice(0, checksumLength);\n}\n\nexport function encodeChecksummed(data: Uint8Array, encoder: Encoder): string {\n  const checksum = makeChecksum(data);\n  return encoder(new Uint8Array([...checksum, ...data]));\n}\n\nexport function decodeChecksummed(encoded: string, decoder: Decoder): Uint8Array {\n  const decoded = decoder(encoded);\n  const expectedChecksum = decoded.slice(0, checksumLength);\n  const raw = decoded.slice(checksumLength);\n\n  if (!arrayEquals(expectedChecksum, makeChecksum(raw))) throw new Error(\"Checksum mismatch\");\n\n  return raw;\n}\n","import {\n  FullSignature,\n  isFullSignature,\n  isSendTransaction,\n  isUnsignedTransaction,\n  PrehashType,\n  SendTransaction,\n  SignedTransaction,\n  UnsignedTransaction,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, isMultisignatureTx, MultisignatureTx } from \"@iov/bns\";\nimport { Ed25519, Sha512 } from \"@iov/crypto\";\nimport { isNonNullObject, TransactionEncoder } from \"@iov/encoding\";\n\nexport function isUnsignedMultisignatureSendTransaction(\n  data: unknown,\n): data is SendTransaction & MultisignatureTx & WithCreator {\n  if (!isNonNullObject(data)) return false;\n\n  const transaction = data as SignedTransaction;\n  if (!isUnsignedTransaction(transaction)) return false;\n  if (!isSendTransaction(transaction)) return false;\n  if (!isMultisignatureTx(transaction)) return false;\n\n  return true;\n}\n\nexport function isSignedMultisignatureSendTransaction(\n  data: unknown,\n): data is SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> {\n  if (!isNonNullObject(data)) return false;\n\n  const { transaction, primarySignature, otherSignatures } = data as SignedTransaction;\n\n  if (!isUnsignedMultisignatureSendTransaction(transaction)) return false;\n  if (!isFullSignature(primarySignature)) return false;\n  if (!Array.isArray(otherSignatures) || otherSignatures.some(sig => !isFullSignature(sig))) return false;\n\n  return true;\n}\n\nexport function toPrintableSignature(signature: FullSignature): string {\n  return JSON.stringify(TransactionEncoder.toJson(signature));\n}\n\nexport function fromPrintableSignature(input: string): FullSignature {\n  const fullSignature = TransactionEncoder.fromJson(JSON.parse(input));\n  if (!isFullSignature(fullSignature)) throw new Error(\"Invalid signature format\");\n  return fullSignature;\n}\n\nexport function toPrintableSignedTransaction(transaction: SignedTransaction | UnsignedTransaction): string {\n  return JSON.stringify(TransactionEncoder.toJson(transaction));\n}\n\nexport function makeSignedTransaction(\n  transaction: SendTransaction & MultisignatureTx & WithCreator,\n  signatures: readonly FullSignature[],\n): SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> {\n  const firstSignature = signatures.find(() => true);\n  if (!firstSignature) throw new Error(\"First signature missing\");\n  return {\n    transaction: transaction,\n    primarySignature: firstSignature,\n    otherSignatures: signatures.slice(1),\n  };\n}\n\nexport async function verifySignature(\n  transaction: SendTransaction & MultisignatureTx & WithCreator,\n  signature: FullSignature,\n): Promise<boolean> {\n  const { bytes, prehashType } = bnsCodec.bytesToSign(transaction, signature.nonce);\n\n  switch (prehashType) {\n    case PrehashType.Sha512: {\n      const prehash = new Sha512(bytes).digest();\n      const valid = await Ed25519.verifySignature(signature.signature, prehash, signature.pubkey.data);\n      return valid;\n    }\n    default:\n      throw new Error(\"Unexpected prehash type\");\n  }\n}\n","import { SendTransaction, SignedTransaction, UnsignedTransaction, WithCreator } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport { Encoding, TransactionEncoder } from \"@iov/encoding\";\n\nimport { base64urlDecode, base64urlEncode } from \"./base64url\";\nimport { decodeChecksummed, encodeChecksummed } from \"./checksummed\";\nimport {\n  isSignedMultisignatureSendTransaction,\n  isUnsignedMultisignatureSendTransaction,\n  toPrintableSignedTransaction,\n} from \"./signatures\";\n\nconst { fromUtf8, toUtf8 } = Encoding;\n\nfunction toLinkEncoded(transaction: SignedTransaction | UnsignedTransaction): string {\n  const data = toUtf8(toPrintableSignedTransaction(transaction));\n  return encodeChecksummed(data, base64urlEncode);\n}\n\nexport function signedFromLinkEncoded(\n  encoded: string,\n): SignedTransaction<SendTransaction & MultisignatureTx & WithCreator> {\n  const data = decodeChecksummed(encoded, base64urlDecode);\n  const signedTransaction = TransactionEncoder.fromJson(JSON.parse(fromUtf8(data)));\n  if (!isSignedMultisignatureSendTransaction(signedTransaction)) {\n    throw new Error(\n      \"Transaction data is not an SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>\",\n    );\n  }\n  return signedTransaction;\n}\n\nexport function unsignedFromLinkEncoded(encoded: string): SendTransaction & MultisignatureTx & WithCreator {\n  const data = decodeChecksummed(encoded, base64urlDecode);\n  const unsignedTransaction = TransactionEncoder.fromJson(JSON.parse(fromUtf8(data)));\n  if (!isUnsignedMultisignatureSendTransaction(unsignedTransaction)) {\n    throw new Error(\"Transaction data is not an SendTransaction & MultisignatureTx & WithCreator\");\n  }\n  return unsignedTransaction;\n}\n\nexport function makeStatusLink(\n  signedTransaction: SignedTransaction<SendTransaction & MultisignatureTx & WithCreator>,\n  absolute = false,\n): string {\n  const encodedTransaction = toLinkEncoded(signedTransaction);\n  const prefix = absolute ? window.location.href.split(\"#\")[0] + \"#\" : \"\";\n  const url = `${prefix}/status/${encodedTransaction}`;\n  return url;\n}\n\nexport function makeSigningLink(\n  unsignedTransaction: SendTransaction & MultisignatureTx & WithCreator,\n  absolute = false,\n): string {\n  const encodedTransaction = toLinkEncoded(unsignedTransaction);\n  const prefix = absolute ? window.location.href.split(\"#\")[0] + \"#\" : \"\";\n  const url = `${prefix}/sign/${encodedTransaction}`;\n  return url;\n}\n","import {\n  Address,\n  Algorithm,\n  Amount,\n  ChainId,\n  Nonce,\n  PubkeyBytes,\n  SendTransaction,\n  UnsignedTransaction,\n  WithCreator,\n} from \"@iov/bcp\";\nimport { bnsCodec, multisignatureIdToAddress, MultisignatureTx } from \"@iov/bns\";\nimport { Decimal, Encoding, Uint64 } from \"@iov/encoding\";\nimport equal from \"fast-deep-equal\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Redirect } from \"react-router\";\n\nimport ConditionalError from \"./ConditionalError\";\nimport { chains } from \"./settings\";\nimport Transaction from \"./Transaction\";\nimport { amountToString } from \"./util/amounts\";\nimport { getBalance } from \"./util/connection\";\nimport { getErrorMessage } from \"./util/errors\";\nimport { createSigned, getPubkeyFromLedger } from \"./util/ledger\";\nimport { makeStatusLink } from \"./util/links\";\n\ninterface CreateProps {}\n\ninterface CreateState {\n  readonly creatorHex: string;\n  readonly chainId: string;\n  readonly formMultisigContractId: string;\n  readonly formRecipient: string;\n  readonly formQuantity: string;\n  readonly formMemo: string;\n  readonly unsignedTransaction?: UnsignedTransaction & SendTransaction & MultisignatureTx;\n  readonly encodingError: string | null;\n  readonly getPubkeyError?: string;\n  readonly signingError?: string;\n  readonly signing: boolean;\n  readonly statusUrl?: string;\n  readonly lastQueriedMultisigContractId?: string;\n  readonly contractInfo?: {\n    readonly address: Address;\n    readonly balance: readonly Amount[] | undefined;\n  };\n}\n\ntype FormField = \"chainId\" | \"multisigContractId\" | \"recipient\" | \"quantity\" | \"memo\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst emptyState: CreateState = {\n  creatorHex: \"\",\n  chainId: \"iov-mainnet\",\n  formMultisigContractId: \"\",\n  formRecipient: \"\",\n  formQuantity: \"\",\n  formMemo: \"\",\n  encodingError: null,\n  signing: false,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst testingState: CreateState = {\n  creatorHex: \"\",\n  chainId: \"iov-boarnet\",\n  formMultisigContractId: \"21\",\n  formRecipient: \"tiov1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqplsnxjl\",\n  formQuantity: \"100.56\",\n  formMemo: \"What a wonderful day\",\n  encodingError: null,\n  signing: false,\n};\n\nfunction expectedPrefixforNetwork(network: \"mainnet\" | \"testnet\"): \"iov\" | \"tiov\" {\n  return network === \"mainnet\" ? \"iov\" : \"tiov\";\n}\n\nclass Create extends React.Component<CreateProps, CreateState> {\n  public constructor(props: CreateProps) {\n    super(props);\n    this.state = { ...testingState };\n  }\n\n  public componentDidUpdate(): void {\n    let encodingError: string | null = null;\n\n    try {\n      const chain = chains.get(this.state.chainId);\n      if (!chain) throw new Error(\"No configuration for theis chain ID found\");\n\n      if (this.state.lastQueriedMultisigContractId !== this.state.formMultisigContractId) {\n        this.setState({\n          lastQueriedMultisigContractId: this.state.formMultisigContractId,\n          contractInfo: undefined,\n        });\n\n        getBalance(chain.id, Uint64.fromString(this.state.formMultisigContractId).toNumber())\n          .then(({ address, balance }) => {\n            this.setState({\n              contractInfo: {\n                address: address,\n                balance: balance,\n              },\n            });\n          })\n          .catch(error => console.error(error));\n      }\n\n      const multisigId = Uint64.fromString(this.state.formMultisigContractId);\n      const sender = multisignatureIdToAddress(\n        this.state.chainId as ChainId,\n        Uint8Array.from(multisigId.toBytesBigEndian()),\n      );\n\n      if (!this.state.creatorHex) throw new Error(\"Transaction creator unset\");\n\n      const expectedPrefix = expectedPrefixforNetwork(chain.networkType);\n      if (!this.state.formRecipient.startsWith(expectedPrefix)) {\n        throw new Error(`Recipient address with prefix '${expectedPrefix}' expected`);\n      }\n\n      const tx: SendTransaction & MultisignatureTx & WithCreator = {\n        kind: \"bcp/send\",\n        creator: {\n          chainId: this.state.chainId as ChainId,\n          pubkey: {\n            algo: Algorithm.Ed25519,\n            data: Encoding.fromHex(this.state.creatorHex) as PubkeyBytes,\n          },\n        },\n        amount: {\n          quantity: Decimal.fromUserInput(this.state.formQuantity, 9).atomics,\n          fractionalDigits: 9,\n          tokenTicker: chain.tokenTicker,\n        },\n        sender: sender,\n        recipient: this.state.formRecipient as Address,\n        memo: this.state.formMemo,\n        fee: { tokens: chain.fee },\n        multisig: [multisigId.toNumber()],\n      };\n\n      // test serialization for input validation\n      bnsCodec.bytesToSign(tx, 0 as Nonce);\n\n      if (!equal(this.state.unsignedTransaction, tx)) {\n        this.setState({\n          unsignedTransaction: tx,\n          encodingError: null,\n        });\n      }\n    } catch (error) {\n      encodingError = getErrorMessage(error);\n    }\n\n    if (this.state.encodingError !== encodingError) {\n      this.setState({\n        unsignedTransaction: undefined,\n        encodingError: encodingError,\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        {this.state.statusUrl && <Redirect to={this.state.statusUrl} push />}\n        <Row>\n          <Col className=\"col-6\">\n            <h3>Enter transaction</h3>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"chainIdInput\">Chain ID</label>\n                <select\n                  className=\"form-control\"\n                  id=\"chainIdInput\"\n                  value={this.state.chainId}\n                  onChange={e => this.handleFormChange(\"chainId\", e)}\n                >\n                  {Array.from(chains.keys()).map(chainId => (\n                    <option>{chainId}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"creatorInput\">Transaction creator</label>\n                <button\n                  className=\"btn btn-link btn-sm\"\n                  onClick={event => {\n                    event.preventDefault();\n                    this.reloadCreatorFromLedger();\n                  }}\n                >\n                  Get from Ledger\n                </button>\n                <button\n                  className=\"btn btn-link btn-sm\"\n                  onClick={event => {\n                    event.preventDefault();\n                    this.clearCreator();\n                  }}\n                >\n                  Clear\n                </button>\n                <input\n                  id=\"creatorInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Creator pubkey \"\n                  value={this.state.creatorHex}\n                  disabled\n                />\n                <small className=\"form-text text-muted\">\n                  Pubkey of the person who creates this transaction\n                </small>\n              </div>\n\n              <ConditionalError error={this.state.getPubkeyError} />\n\n              <div className=\"form-group\">\n                <label htmlFor=\"senderInput\">Multisig contract ID</label>\n                <input\n                  id=\"senderInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Sender\"\n                  value={this.state.formMultisigContractId}\n                  onChange={e => this.handleFormChange(\"multisigContractId\", e)}\n                />\n                <small className=\"form-text text-muted\">Use integer format, e.g. 42</small>\n                <div className=\"invalid-feedback\">Please choose a username.</div>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"recipientInput\">Recipient address</label>\n                <input\n                  id=\"recipientInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Recipient\"\n                  value={this.state.formRecipient}\n                  onChange={e => this.handleFormChange(\"recipient\", e)}\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  IOV address, e.g. iov1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqp396zjw\n                </small>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"quantityInput\">Quantity</label>\n                <input\n                  id=\"quantityInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"100.56\"\n                  value={this.state.formQuantity}\n                  onChange={e => this.handleFormChange(\"quantity\", e)}\n                />\n                <small className=\"form-text text-muted\">Quantity, e.g. 100.56 for 100.56 IOV</small>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"memoInput\">Memo</label>\n                <input\n                  id=\"memoInput\"\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Memo\"\n                  value={this.state.formMemo}\n                  onChange={e => this.handleFormChange(\"memo\", e)}\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">\n                  Arbitrary text attached to the transaction\n                </small>\n              </div>\n\n              <p>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={this.state.signing || !this.state.unsignedTransaction}\n                  onClick={event => {\n                    event.preventDefault();\n                    this.signAndContinue();\n                  }}\n                >\n                  Sign and continue\n                </button>\n              </p>\n\n              <Alert hidden={!this.state.signing} variant=\"info\">\n                Please sign transaction using Ledger device now\n              </Alert>\n              <ConditionalError error={this.state.signingError} />\n            </form>\n          </Col>\n          <Col className=\"col-6\">\n            <h3>Multisig contract info</h3>\n            {this.state.contractInfo && (\n              <p>\n                Address: {this.state.contractInfo.address}\n                <br />\n                Balance:{\" \"}\n                {this.state.contractInfo.balance\n                  ? this.state.contractInfo.balance.map(amountToString).join(\", \")\n                  : \"–\"}\n              </p>\n            )}\n\n            <h3>Details</h3>\n            {this.state.unsignedTransaction && (\n              <div>\n                <p>This is a machine processable representation of the transaction.</p>\n                <Transaction transaction={this.state.unsignedTransaction} />\n              </div>\n            )}\n            <Alert variant=\"danger\" hidden={!this.state.encodingError}>\n              <p className=\"mb-0\">\n                <strong>Transaction encoding error:</strong>\n                <br />\n                {this.state.encodingError}\n              </p>\n            </Alert>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private handleFormChange(\n    field: FormField,\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ): void {\n    const newValue = event.target.value;\n\n    switch (field) {\n      case \"chainId\":\n        this.setState({ chainId: newValue });\n        break;\n      case \"multisigContractId\":\n        this.setState({ formMultisigContractId: newValue });\n        break;\n      case \"recipient\":\n        this.setState({ formRecipient: newValue });\n        break;\n      case \"quantity\":\n        this.setState({ formQuantity: newValue });\n        break;\n      case \"memo\":\n        this.setState({ formMemo: newValue });\n        break;\n      default:\n        throw new Error(`Unsupported form field '${field}'`);\n    }\n  }\n\n  private clearCreator(): void {\n    this.setState({\n      creatorHex: \"\",\n      getPubkeyError: undefined,\n    });\n  }\n\n  private reloadCreatorFromLedger(): void {\n    this.clearCreator();\n\n    const chain = chains.get(this.state.chainId);\n    if (!chain) throw new Error(\"Chain not found\");\n\n    getPubkeyFromLedger(chain.networkType).then(\n      response => {\n        const pubkeyHex = Encoding.toHex(response.pubkey);\n        console.log(\"Received pubkey from Ledger:\", pubkeyHex);\n        this.setState({ creatorHex: pubkeyHex });\n      },\n      error => {\n        console.info(\"Full error message\", error);\n        this.setState({ getPubkeyError: getErrorMessage(error) });\n      },\n    );\n  }\n\n  private signAndContinue(): void {\n    this.setState({\n      signingError: undefined,\n      signing: true,\n    });\n\n    if (!this.state.unsignedTransaction) throw new Error(\"unsigned transaction not set\");\n    createSigned(this.state.unsignedTransaction).then(\n      signed => {\n        const statusUrl = makeStatusLink(signed);\n        console.log(\"Navigating to\", statusUrl);\n        this.setState({\n          statusUrl: statusUrl,\n          signing: false,\n        });\n      },\n      error => {\n        console.info(\"Full error message\", error);\n        this.setState({\n          signingError: getErrorMessage(error),\n          signing: false,\n        });\n      },\n    );\n  }\n}\n\nexport default Create;\n","import { Algorithm, Identity, PubkeyBytes, SendTransaction, WithCreator } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport ConditionalError from \"./ConditionalError\";\nimport { chains } from \"./settings\";\nimport Transaction from \"./Transaction\";\nimport { getErrorMessage } from \"./util/errors\";\nimport { createSignature, getPubkeyFromLedger } from \"./util/ledger\";\nimport { unsignedFromLinkEncoded } from \"./util/links\";\nimport { toPrintableSignature } from \"./util/signatures\";\n\ninterface SignProps {}\n\ninterface SignState {\n  readonly transaction: (SendTransaction & MultisignatureTx & WithCreator) | null;\n  readonly localSignature: string;\n  readonly signingError?: string;\n  readonly globalError?: string;\n  readonly signing: boolean;\n}\n\nclass Sign extends React.Component<SignProps, SignState> {\n  public constructor(props: SignProps) {\n    super(props);\n    this.state = {\n      transaction: null,\n      localSignature: \"\",\n      signing: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (!this.state.transaction) {\n      const matches = window.location.href.match(/\\/sign\\/([-_=a-zA-Z0-9]+)/);\n      if (matches && matches.length >= 2) {\n        try {\n          const unsigned = unsignedFromLinkEncoded(matches[1]);\n          this.setState({ transaction: unsigned });\n        } catch (error) {\n          console.warn(\"Full error message\", error);\n          this.setState({ globalError: \"Error in URL: \" + getErrorMessage(error) });\n        }\n      } else {\n        this.setState({ globalError: \"Error in URL: Transaction missing\" });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <ConditionalError error={this.state.globalError} />\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"col-6\">\n            <h2>Review transaction</h2>\n            {this.state.transaction && <Transaction transaction={this.state.transaction} />}\n          </Col>\n          <Col className=\"col-6\">\n            <h2>Create Signature</h2>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"yourSignature\">Your signature</label>\n              <textarea\n                className=\"form-control\"\n                id=\"yourSignature\"\n                rows={6}\n                value={this.state.localSignature}\n                readOnly={true}\n              ></textarea>\n            </div>\n\n            <p>\n              <button\n                className=\"btn btn-primary\"\n                onClick={async event => {\n                  event.preventDefault();\n                  this.setState({ localSignature: \"\", signingError: undefined, signing: true });\n\n                  try {\n                    const signature = await this.createSignature();\n                    this.setState({\n                      localSignature: signature,\n                      signing: false,\n                    });\n                  } catch (error) {\n                    console.info(\"Full error message\", error);\n                    const errorMessage = getErrorMessage(error);\n                    this.setState({\n                      signingError: errorMessage,\n                      signing: false,\n                    });\n                  }\n                }}\n              >\n                Sign transaction now\n              </button>\n            </p>\n\n            <Alert hidden={!this.state.signing} variant=\"info\">\n              Please sign transaction using Ledger device now\n            </Alert>\n            <ConditionalError error={this.state.signingError} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>&nbsp;</Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async createSignature(): Promise<string> {\n    const original = this.state.transaction;\n    if (!original) throw new Error(\"Transaction not set\");\n\n    const chain = chains.get(original.creator.chainId);\n    if (!chain) throw new Error(\"Chain not found\");\n\n    const pubkeyResponse = await getPubkeyFromLedger(chain.networkType);\n\n    const signer: Identity = {\n      chainId: original.creator.chainId,\n      pubkey: {\n        algo: Algorithm.Ed25519,\n        data: pubkeyResponse.pubkey as PubkeyBytes,\n      },\n    };\n\n    const signature = await createSignature(original, signer);\n    return toPrintableSignature(signature);\n  }\n}\n\nexport default Sign;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\ninterface StartProps {}\n\nclass Start extends React.Component<StartProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>Multitool</h1>\n            <h2>Create multisignatures transactions using Ledger Nano S</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/create\" className=\"btn btn-lg btn-block btn-primary\">\n              Create new transaction\n            </Link>\n          </Col>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">&nbsp;</Col>\n          <Col className=\"\"></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Start;\n","import { ChainId, FullSignature } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { Encoding } from \"@iov/encoding\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport { getNonce } from \"./util/connection\";\nimport { toPrintableSignature } from \"./util/signatures\";\nimport { ellideMiddle } from \"./util/text\";\n\nconst { toHex } = Encoding;\n\ninterface NonceStatus {\n  readonly error?: {\n    readonly received: number;\n    readonly expected: number;\n  };\n}\n\ninterface SignatureProps {\n  readonly index: number;\n  readonly chainId: ChainId;\n  readonly signature: FullSignature;\n  readonly noneStatus?: NonceStatus;\n}\n\nconst Signature = ({ index, chainId, signature, noneStatus }: SignatureProps): JSX.Element => {\n  const address = bnsCodec.identityToAddress({ chainId: chainId, pubkey: signature.pubkey });\n  return (\n    <li className=\"list-group-item last-child-no-bottom-margin\" key={toHex(signature.pubkey.data)}>\n      <h5>\n        {`#${index + 1}`} {ellideMiddle(address, 22)}\n      </h5>\n      <p className=\"text-muted text-break\">{toPrintableSignature(signature)}</p>\n      {noneStatus && noneStatus.error && (\n        <Alert variant=\"warning\">\n          Nonce outdated. In signature: {noneStatus.error.received}; Expected: {noneStatus.error.expected}\n        </Alert>\n      )}\n    </li>\n  );\n};\n\ninterface SignaturesListPros {\n  readonly chainId: ChainId;\n  readonly signatures: readonly FullSignature[];\n}\n\ninterface SignaturesListState {\n  readonly nonceStatuses: readonly NonceStatus[];\n}\n\nclass SignaturesList extends React.Component<SignaturesListPros, SignaturesListState> {\n  private interval: NodeJS.Timeout | undefined;\n\n  public constructor(props: SignaturesListPros) {\n    super(props);\n    this.state = {\n      nonceStatuses: props.signatures.map((_): NonceStatus => ({})),\n    };\n  }\n\n  public componentDidMount(): void {\n    const runCheck = async (): Promise<void> => {\n      try {\n        const statuses = await Promise.all(\n          this.props.signatures.map(\n            async (signature): Promise<NonceStatus> => {\n              const latestNonce = await getNonce(this.props.chainId, signature.pubkey);\n              if (signature.nonce === latestNonce) {\n                return {};\n              } else {\n                return {\n                  error: {\n                    expected: latestNonce,\n                    received: signature.nonce,\n                  },\n                };\n              }\n            },\n          ),\n        );\n        this.setState({ nonceStatuses: statuses });\n      } catch (error) {\n        console.warn(error);\n      }\n    };\n\n    setTimeout(runCheck, 300); // initial run\n    this.interval = setInterval(runCheck, 7000);\n  }\n\n  public componentWillUnmount(): void {\n    if (this.interval) clearTimeout(this.interval);\n    this.interval = undefined;\n  }\n\n  public render(): JSX.Element {\n    return (\n      <ol className=\"list-group mb-3\">\n        {this.props.signatures.map((signature, index) => (\n          <Signature\n            key={toHex(signature.signature)}\n            index={index}\n            chainId={this.props.chainId}\n            signature={signature}\n            noneStatus={this.state.nonceStatuses[index]}\n          />\n        ))}\n      </ol>\n    );\n  }\n}\n\nexport default SignaturesList;\n","export function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n","import { FullSignature, SendTransaction, TransactionId, WithCreator } from \"@iov/bcp\";\nimport { MultisignatureTx } from \"@iov/bns\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport ConditionalError from \"./ConditionalError\";\nimport SignaturesList from \"./SignaturesList\";\nimport Transaction from \"./Transaction\";\nimport { arrayEquals } from \"./util/arrays\";\nimport { postSignedTransaction } from \"./util/connection\";\nimport { getErrorMessage } from \"./util/errors\";\nimport { makeSigningLink, signedFromLinkEncoded } from \"./util/links\";\nimport { fromPrintableSignature, makeSignedTransaction, verifySignature } from \"./util/signatures\";\n\ninterface StatusProps {}\n\ninterface StatusState {\n  readonly transaction: (SendTransaction & MultisignatureTx & WithCreator) | null;\n  readonly signatures: readonly FullSignature[];\n  readonly localSignature: string;\n  readonly addSignatureError?: string;\n  readonly posting: boolean;\n  readonly postError?: string;\n  readonly postSuccess?: TransactionId;\n  readonly globalError?: string;\n}\n\nclass Status extends React.Component<StatusProps, StatusState> {\n  public constructor(props: StatusProps) {\n    super(props);\n    this.state = {\n      transaction: null,\n      signatures: [],\n      localSignature: \"\",\n      posting: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (!this.state.transaction) {\n      const matches = window.location.href.match(/\\/status\\/([-_=a-zA-Z0-9]+)/);\n      if (matches && matches.length >= 2) {\n        try {\n          const signedTransaction = signedFromLinkEncoded(matches[1]);\n          const { transaction, primarySignature, otherSignatures } = signedTransaction;\n          this.setState({\n            transaction: transaction,\n            signatures: [primarySignature, ...otherSignatures],\n          });\n        } catch (error) {\n          console.warn(\"Full error message\", error);\n          this.setState({ globalError: \"Error in URL: \" + getErrorMessage(error) });\n        }\n      } else {\n        this.setState({ globalError: \"Error in URL: Transaction missing\" });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <ConditionalError error={this.state.globalError} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h2>Signing link</h2>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"signingLink\">\n                Send this link to every user supposed to sign this transaction\n              </label>\n              <input\n                className=\"form-control\"\n                id=\"signingLink\"\n                value={this.state.transaction ? makeSigningLink(this.state.transaction, true) : \"\"}\n                readOnly={true}\n              />\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"col-6\">\n            <h2>Review transaction</h2>\n            {this.state.transaction && <Transaction transaction={this.state.transaction} />}\n          </Col>\n          <Col className=\"col-6\">\n            <h2>Signatures</h2>\n            {this.state.transaction && (\n              <SignaturesList\n                chainId={this.state.transaction.creator.chainId}\n                signatures={this.state.signatures}\n              />\n            )}\n\n            <p>\n              <button\n                className=\"btn btn-primary btn-sm\"\n                onClick={event => {\n                  event.preventDefault();\n                  this.addSignature();\n                }}\n              >\n                Add signature\n              </button>\n            </p>\n            <ConditionalError error={this.state.addSignatureError} />\n\n            <h2>Post to blockchain</h2>\n            <div hidden={!!this.state.postSuccess}>\n              <p>The transaction with all signatures from above will be posted to the IOV blockchain.</p>\n              <p>\n                <button\n                  className=\"btn btn-primary\"\n                  disabled={this.state.posting}\n                  onClick={event => {\n                    event.preventDefault();\n                    this.postToChain();\n                  }}\n                >\n                  Post now\n                </button>\n              </p>\n            </div>\n            <Alert variant=\"success\" hidden={!this.state.postSuccess}>\n              <p>Sucessfully posted transaction with ID {this.state.postSuccess} to the blockchain.</p>\n            </Alert>\n            <ConditionalError error={this.state.postError} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>&nbsp;</Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async addSignature(): Promise<void> {\n    if (!this.state.transaction) throw new Error(\"Original transaction not set\");\n\n    this.setState({ addSignatureError: undefined });\n\n    const signatureInput = prompt(\"Please enter signature\");\n    if (signatureInput === null) return;\n\n    try {\n      const newSignature = fromPrintableSignature(signatureInput);\n\n      if (!(await verifySignature(this.state.transaction, newSignature))) {\n        throw new Error(\"Signature is not valid for this transaction\");\n      }\n\n      const existing = this.state.signatures.map(fullSignature => fullSignature.signature);\n      if (existing.find(signature => arrayEquals(signature, newSignature.signature))) {\n        throw new Error(\"This signature is already included\");\n      }\n\n      /** signatures by other accounts */\n      const otherSignatures = this.state.signatures.filter(\n        signature => !arrayEquals(signature.pubkey.data, newSignature.pubkey.data),\n      );\n\n      this.setState({\n        signatures: [...otherSignatures, newSignature],\n      });\n    } catch (error) {\n      console.info(\"Full error message\", error);\n      this.setState({ addSignatureError: getErrorMessage(error) });\n    }\n  }\n\n  private postToChain(): void {\n    if (!this.state.transaction) throw new Error(\"Original transaction not set\");\n    const signed = makeSignedTransaction(this.state.transaction, this.state.signatures);\n\n    this.setState({\n      posting: true,\n      postError: undefined,\n    });\n    postSignedTransaction(signed).then(\n      transactionId => {\n        console.log(\"Successfully posted\", transactionId);\n        this.setState({\n          posting: false,\n          postError: undefined,\n          postSuccess: transactionId,\n        });\n      },\n      error => {\n        console.info(\"Full error message\", error);\n        this.setState({\n          posting: false,\n          postError: getErrorMessage(error),\n        });\n      },\n    );\n  }\n}\n\nexport default Status;\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport Create from \"./Create\";\nimport Sign from \"./Sign\";\nimport Start from \"./Start\";\nimport Status from \"./Status\";\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/create\" component={Create} />\n      <Route path=\"/status\" component={Status} />\n      <Route path=\"/sign\" component={Sign} />\n      <Route path=\"/\" component={Start} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}